{"version":3,"sources":["keyboard-input-hook.js","App.js","serviceWorker.js","index.js"],"names":["useKey","handleKeyCallback","keyEvent","whitelist","blacklist","console","warn","length","useState","keyCode","keyCodeHistory","code","codeHistory","state","setState","useEffect","window","document","createElement","handleKey","e","key","indexOf","prevState","keyName","addEventListener","removeEventListener","keyNameHistory","useKeyUp","numbers","symbols","Boolean","location","hostname","match","ReactDOM","render","memory","setMemory","expression","setExpression","deleteLast","slice","displayResults","includes","isValidExpression","String","Function","enterInput","input","numberHasMoreThanOneDecimal","isValidInput","activeElement","blur","className","data-testid","readOnly","type","value","onClick","map","val","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ce8663eb.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\n\n//this is a modified version of https://github.com/bobinrinder/react-keyboard-input-hook\n//I added functionality to get the actual character that the key press returns when typing (e.key)\n\nexport const FIRE_TV_KEY_CODES = [8, 13, 37, 38, 39, 40, 179, 227, 228];\n\nexport default function useKey(\n  handleKeyCallback = null,\n  keyEvent = \"keyup\",\n  whitelist = [],\n  blacklist = []\n) {\n  // ensure valid event keyEvent\n  if (keyEvent !== \"keyup\" && keyEvent !== \"keydown\") {\n    console.warn(\n      \"useKey keyEvent invalid, assumed keyEvent 'keydown' as fallback!\"\n    );\n    keyEvent = \"keydown\";\n  }\n  // ensure only white- OR blacklist are set\n  if (whitelist.length > 0 && blacklist.length > 0) {\n    console.warn(\"White- and blacklist arrays > 0, emptied blacklist!\");\n    blacklist = [];\n  }\n  // init state\n  const [state, setState] = useState({\n    keyCode: null,\n    keyCodeHistory: [],\n    code: null,\n    codeHistory: []\n  });\n\n  useEffect(() => {\n    // check if window and dom available (to exit early on Server-Side-Rendering)\n    if (\n      !(\n        typeof window !== \"undefined\" &&\n        window.document &&\n        window.document.createElement\n      )\n    ) {\n      return null;\n    }\n\n    const handleKey = e => {\n      // get key details from event\n      const keyCode = e.keyCode;\n      const key = e.key;\n      const code = e.code || \"UnknownKey\";\n\n\n      // check if white or blacklisted\n      if (whitelist.length > 0 && whitelist.indexOf(keyCode) === -1) {\n        return;\n      }\n      if (blacklist.length > 0 && blacklist.indexOf(keyCode) > -1) {\n        return;\n      }\n\n      // update state with new key details\n      setState(prevState => {\n        return {\n          keyCode,\n          keyCodeHistory: [...prevState.keyCodeHistory, keyCode],\n          code,\n          codeHistory: [...prevState.codeHistory, code],\n          key,\n        };\n      });\n\n      // handle callback (if exists)\n      if (handleKeyCallback && typeof handleKeyCallback == \"function\") {\n        handleKeyCallback({\n          keyName: code,\n          keyCode,\n          key,\n          e\n        });\n      }\n    };\n\n    // register event listener\n    window.addEventListener(keyEvent, handleKey);\n    // cleanup event listener\n    return () => window.removeEventListener(keyEvent, handleKey);\n  }, [handleKeyCallback, keyEvent, blacklist, whitelist]);\n\n  return {\n    keyCode: state.keyCode,\n    keyCodeHistory: state.keyCodeHistory,\n    keyName: state.code,\n    keyNameHistory: state.codeHistory,\n    key:state.key,\n  };\n}\n\nexport function useKeyUp(\n  handleKeyCallback = null,\n  whitelist = [],\n  blacklist = []\n) {\n  return useKey(handleKeyCallback, \"keyup\", whitelist, blacklist);\n}\n\nexport function useKeyDown(\n  handleKeyCallback = null,\n  whitelist = [],\n  blacklist = []\n) {\n  return useKey(handleKeyCallback, \"keydown\", whitelist, blacklist);\n}\n\nexport function useFireTvKeyUp(\n  handleKeyCallback = null,\n  whitelist = FIRE_TV_KEY_CODES,\n  blacklist = []\n) {\n  return useKey(handleKeyCallback, \"keyup\", whitelist, blacklist);\n}\n\nexport function useFireTvKeyDown(\n  handleKeyCallback = null,\n  whitelist = FIRE_TV_KEY_CODES,\n  blacklist = []\n) {\n  return useKey(handleKeyCallback, \"keydown\", whitelist, blacklist);\n}\n\nexport function useKeyCombo(keyCodes = [], handleKeyCallback = null) {\n  const [currentlyPressedKeyCodes, setCurrentlyPressedKeyCodes] = useState([]);\n\n  const handleKeyDown = ({ keyCode, keyName, key, e }) => {\n    if (currentlyPressedKeyCodes.indexOf(keyCode) === -1) {\n      if (\n        checkIfArrayItemsinArray(keyCodes, [\n          ...currentlyPressedKeyCodes,\n          keyCode\n        ])\n      ) {\n        handleKeyCallback({ keyCode, keyName, key, e });\n        setCurrentlyPressedKeyCodes([]);\n      } else {\n        setCurrentlyPressedKeyCodes(prevState => [...prevState, keyCode]);\n      }\n    }\n  };\n  const handleKeyUp = ({ keyCode }) => {\n    const indexOfPressedKeyCode = currentlyPressedKeyCodes.indexOf(keyCode);\n    if (indexOfPressedKeyCode > -1) {\n      setCurrentlyPressedKeyCodes(prevState => [\n        ...prevState.slice(0, indexOfPressedKeyCode),\n        ...prevState.slice(indexOfPressedKeyCode + 1)\n      ]);\n    }\n  };\n\n  useKeyDown(handleKeyDown, keyCodes);\n  useKeyUp(handleKeyUp, keyCodes);\n\n  if (!keyCodes || keyCodes.length < 2 || !handleKeyCallback) {\n    console.warn(\"Invalid arguments for usekeyCombo!\");\n  }\n}\n\nexport function checkIfArrayItemsinArray(arrayItems, array) {\n  if (array.length === 0 || arrayItems.length === 0) {\n    return false;\n  }\n  for (let i = 0; i < arrayItems.length; i++) {\n    if (array.indexOf(arrayItems[i]) === -1) {\n      return false;\n    }\n  }\n  return true;\n}","import React, { useState } from 'react';\nimport { useKeyUp } from \"./keyboard-input-hook\";\nimport './paper.min.css';\nimport './App.css';\n\nconst numbers=['1','2','3','4','5','6','7','8','9','0'],\n      symbols=['-','+','/','*']\n\nexport function isValidInput(expression,input){\n  //valid input can be: a number, \n  //a symbol if the previous input is a number, \n  //a negative sign not following another negative sign, \n  //and there cannot be more than one decimal point per number\n  if (numbers.includes(input)) return true\n  else if (symbols.includes(input) && numbers.includes(expression.slice(-1))) return true\n  else if (input==='-' && expression.slice(-1)!=='-') return true\n  else if (input==='.' && !numberHasMoreThanOneDecimal(expression+input)) return true\n  return false\n}\n\nexport function numberHasMoreThanOneDecimal(input){\n  //find two decimal points separated by 0 or more numbers\n  return input.match(/\\.\\d*\\./)!==null\n}\n\nexport function isValidExpression(expression){\n  //we validated input but still need to handle the case of an expression that ends in a symbol being invalid\n  return symbols.includes(expression.slice(-1)) ? false : true\n}\n\nexport function App() {\n  const [memory,setMemory]= useState(''),\n        [expression,setExpression]= useState('')\n\n  const { key } = useKeyUp();\n\n  const handleKeyUp = ({ key }) => {\n    if (key===\"Enter\"|| key===\"=\") displayResults()\n    else if (key===\"Backspace\") deleteLast()\n    else enterInput(String(key))    \n  };\n\n  useKeyUp(handleKeyUp);\n\n  function deleteLast(){\n    setExpression(expression.slice(0,expression.length-1))\n  }\n\n  function displayResults(){\n    if (!expression) setExpression('')\n    else if (isValidExpression(expression)) setExpression(String((new Function('return '+expression))()));\n  }\n\n  function enterInput(input){\n    if (isValidInput(expression,input)) setExpression(expression+input)\n    //this prevents the enter key from triggering button presses unintentionally, \n    //since we allow input through mouse clicks and keyboard\n    document.activeElement.blur();\n  }\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"text-primary\">Simple Calc</h1>\n\n      <main className='calc-main card'>\n        <input data-testid=\"calc-display\" readOnly type=\"text\" value={expression.length ? expression : '0'} />\n\n        <div className='card-body'>\n          <div className='keypad'>\n            <button onClick={()=>setExpression('')}>C</button>\n            <button onClick={deleteLast}>⬅</button>\n            <button onClick={()=>setMemory(expression)}>M</button>\n            <button onClick={()=>setExpression(expression+memory)}>MR</button>\n            {[...symbols,...numbers].map(val => \n              <button key={val} onClick={()=>enterInput(val)}>\n                {val}\n              </button>\n            )}\n            <button onClick={()=>enterInput('.')}>.</button>\n            <button onClick={displayResults}>=</button>\n          </div>\n        </div>\n      </main>\n      <h3 className=\"text-primary\">By Douglas Lerner</h3>\n    </div>\n  );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}